'use strict';

var path = require('path');
var chalk = require('chalk');

var lastcwd;
var lastcwdregex;

function pathinfo(filepath) {
  var cwd = process.cwd();

  if (lastcwd !== cwd) {
    lastcwd = cwd;
    lastcwdregex = new RegExp('^' + lastcwd + '/');
  }

  var dirname = path.dirname(filepath);
  dirname = dirname === '.' ? '' : dirname + '/';

  var basepath = dirname.replace(lastcwdregex, '');
  var rootpath = basepath !== dirname ? cwd + '/' : '';

  return {
    path: filepath,
    dirname: dirname,
    basepath: basepath,
    rootpath: rootpath,
    basename: path.basename(filepath),
  };
}

function defaults(obj, def) {
  var res = {};
  var key;

  for (key in obj) {
    if (!obj.hasOwnProperty(key))
      continue;
    res[key] = obj[key];
  }

  for (key in def) {
    if (!def.hasOwnProperty(key) || res[key] !== undefined)
      continue;
    res[key] = def[key];
  }
  return res;
}

function colorize(info, options) {
  options = options || {};

  if (typeof(info) === 'string' || info instanceof String)
    info = pathinfo(info);

  options = defaults(options, {
    colors: true,
    file: function(info, options) {
      return info.dirname && !info.dirname.match('node_modules/') ? options.basename : options.basepath;
    },
    basename: 'cyan',
    rootpath: 'grey',
    basepath: 'reset',
  });

  ['file', 'rootpath', 'basepath', 'basename'].forEach(function(color) {
    while (typeof(options[color]) === 'function' || options[color] instanceof Function)
      options[color] = options[color](info, options);
  });

  if (!('colors' in options))
    options.colors = true;

  var localChalk = new chalk.constructor({enabled: options.colors});

  return localChalk[options.rootpath](info.rootpath) +
    localChalk[options.basepath](info.basepath) +
    localChalk[options.file](info.basename)
  ;
}

module.exports = {
  pathinfo: pathinfo,
  colorize: colorize,
};
